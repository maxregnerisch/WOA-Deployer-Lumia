<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="WindowsDeployedSuccessfully" xml:space="preserve">
    <value># Done!
Now, follow these directions:

1. **Eject the phone safely** to avoid data corruption issues
2. Reboot the phone by pressing the **[Power]** and holding it until it vibrates
3. The phone will reboot
4. Inside the Boot Menu, choose **"Windows 10"** by using the **[Camera]** button to start the Windows 10 ARM Setup  
5. **Wait patiently** until the Windows Setup starts. While you wait, the screen will likely become completely black for some minutes. Don't worry, let it continue. If touchscreen doesn't work, reboot until it works (known issue).
  - If a red warning screen pops up during the installation related to unsigned drivers, choose to **install** them.
7. Once the Windows Setup is loaded, proceed as usual.

## Please, support my work
If this tool has been useful for you, please, consider a small donation using the [**❤ Donate**](https://github.com/WOA-Project/WOA-Deployer-Lumia/blob/master/Docs/Donations.md) button. Thanks 😊

Enjoy!!</value>
  </data>
  <data name="WarningNotice" xml:space="preserve">
    <value>- This tool comes with no warranty. 
- The authors can't be hold responsible for any damage it may cause to your device.    
- This tool intended for usage with Lumia 950 and 950 XL **ONLY**.

## WARNING
Please, before using this tool, **create a full backup of your phone**. You can do it with applications like [Win32DiskImager](https://sourceforge.net/projects/win32diskimager/). Some partitions, like **DPP** are unique to your phone and are unrecoverable in case of failure. 
    
By clicking "OK" you accept the aforementioned risks.</value>
  </data>
  <data name="TermsOfUseTitle" xml:space="preserve">
    <value>Disclaimer Notice and Terms of Use</value>
  </data>
  <data name="CannotInstallGpu" xml:space="preserve">
    <value>Unable to install the GPU. Please, ensure that WOA is installed.</value>
  </data>
  <data name="DeploymentFinished" xml:space="preserve">
    <value>Finished</value>
  </data>
  <data name="DualBootEnabled" xml:space="preserve">
    <value>Dual Boot Enabled!</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="DualBootDisabled" xml:space="preserve">
    <value>Dual Boot Disabled!</value>
  </data>
  <data name="AppTitle" xml:space="preserve">
    <value>WOA Deployer for Lumia v{0}</value>
  </data>
  <data name="ImageCaptured" xml:space="preserve">
    <value>Image captured</value>
  </data>
  <data name="ImageRestored" xml:space="preserve">
    <value>Image restored</value>
  </data>
</root>